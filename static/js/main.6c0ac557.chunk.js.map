{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Contryes","name","languages","useState","isActive","setIsActive","tree","handler","useRef","useEffect","mhandler","e","current","contains","target","document","addEventListener","useClickOutside","ref","onClick","map","c","Countries","countries","App","structure","data","continents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"8mgBAIMA,EAAW,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,UAAe,EACPC,oBAAS,GADF,mBAChCC,EADgC,KACtBC,EADsB,KAkBnCC,EAfkB,SAACC,GACrB,IAAID,EAAOE,mBAWX,OATAC,qBAAU,WACR,IAAIC,EAAW,SAACC,GACVL,EAAKM,QAAQC,SAASF,EAAEG,SAC1BP,KAIJ,OADAQ,SAASC,iBAAiB,YAAaN,GAChC,WAAOK,SAASC,iBAAiB,YAAaN,OAEhDJ,EAGEW,EAAgB,WACzBZ,GAAY,MAGd,OACE,oBAAIa,IAAKZ,EAAT,SACE,+BAAK,sBAAMa,QAAS,kBAAMd,GAAaD,IAAlC,SAA8CH,IAChDG,GAAY,6BACVF,EAAUkB,KAAI,SAAAC,GAAC,OACd,6BAAI,+BAAOA,EAAEpB,oBAQnBqB,EAAY,SAAC,GAAuB,IAAtBrB,EAAqB,EAArBA,KAAMsB,EAAe,EAAfA,UAAe,EACPpB,oBAAS,GADF,mBAChCC,EADgC,KACtBC,EADsB,KAkBnCC,EAfkB,SAACC,GACrB,IAAID,EAAOE,mBAWX,OATAC,qBAAU,WACR,IAAIC,EAAW,SAACC,GACVL,EAAKM,QAAQC,SAASF,EAAEG,SAC1BP,KAIJ,OADAQ,SAASC,iBAAiB,YAAaN,GAChC,WAAOK,SAASC,iBAAiB,YAAaN,OAEhDJ,EAGEW,EAAgB,WACzBZ,GAAY,MAGd,OACE,oBAAIa,IAAKZ,EAAT,SACI,+BAAI,sBAAMa,QAAS,kBAAMd,GAAaD,IAAlC,SAA8CH,IAC/CG,GAAY,8BACVmB,EAAUH,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAUpB,KAAMoB,EAAEpB,KAAMC,UAAWmB,EAAEnB,uBAYtDsB,EAJL,WACR,OAAO,8BAAMC,EAAUC,KAAKC,WAAWP,KAAI,SAAAC,GAAC,OAAG,cAAC,EAAD,CAAWpB,KAAMoB,EAAEpB,KAAMsB,UAAWF,EAAEE,kBC9DxEK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFxB,SAASyB,eAAe,SAM1BZ,M","file":"static/js/main.6c0ac557.chunk.js","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport './App.css'\nimport structure from './API'\n\nconst Contryes = ({ name, languages}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  let useClickOutside = (handler) => {\n    let tree = useRef()\n\n    useEffect(() => {\n      let mhandler = (e) => {\n        if(!tree.current.contains(e.target)){\n          handler()\n        }\n      }\n      document.addEventListener(\"mousedown\", mhandler)\n      return () => {document.addEventListener(\"mousedown\", mhandler)}  \n    })\n    return tree\n  }\n\n  let tree = useClickOutside(() => {\n    setIsActive(false)\n  })\n\n  return(\n    <ul ref={tree}>\n      <li ><span onClick={() => setIsActive(!isActive)}>{name}</span>\n        {isActive && <ul>\n          {languages.map(c => \n            <li><span>{c.name}</span></li>\n          )}\n        </ul>}\n      </li>\n    </ul>\n  )\n}\n\nconst Countries = ({name, countries}) => {\n  const [isActive, setIsActive] = useState(false);\n\n  let useClickOutside = (handler) => {\n    let tree = useRef()\n\n    useEffect(() => {\n      let mhandler = (e) => {\n        if(!tree.current.contains(e.target)){\n          handler()\n        }\n      }\n      document.addEventListener(\"mousedown\", mhandler)\n      return () => {document.addEventListener(\"mousedown\", mhandler)}  \n    })\n    return tree\n  }\n\n  let tree = useClickOutside(() => {\n    setIsActive(false)\n  })\n \n  return (\n    <ul ref={tree} >\n        <li><span onClick={() => setIsActive(!isActive)}>{name}</span>\n          {isActive && <div>\n            {countries.map(c => <Contryes name={c.name} languages={c.languages} />)}\n          </div>}\n        </li>\n    </ul>\n  );\n};\n\n\nconst App=()=> {\n  return <div>{structure.data.continents.map(c =><Countries name={c.name} countries={c.countries} />)}</div>\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}